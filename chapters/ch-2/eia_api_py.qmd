---
title: "Chapter 2 - EIA API - Python Client"
format:
  html:
    code-fold: false
jupyter: python3
---

In this section, we will see how query the EIA API with Python using. We will use the eia_api.py to send GET requests to the API.

The `eia_api.py` file provides a set of functions to query data from the EIA API V2. This includes the following functions:

- `eia_get` - to send GET request for data
- `eia_metadata` - to send GET request for metadata
- `eia_backfill` - to send a GET request for large data (more than 5000 observations)


We will continue with the same example we used before - the hourly demand of electricity for balancing authority subregion PGAE. As before, we will use the API dashboard to extract the GET request:

<figure>
<img src="./images/query-detail.png" width="100%" align="center"/></a>
<figcaption> Figure 1 - The GET request details for balancing authority subregion PGAE</figcaption>
</figure>


```{python}
import eia_api as api
import pandas as pd
import plotly.express as px
import os
```


GET Reuqest parameters:

```{r}
eia_api_key = os.getenv('EIA_API_KEY')

api_meta_path = "electricity/rto/region-sub-ba-data/"

api_data_path = "electricity/rto/region-sub-ba-data/data"

frequency = "frequency"

offset = 0

length = 5000

facets = {
    parent = "CISO",
    subba = "PGAE"
}

```


```{r}
meta = api.eia_metadata(
    api_path = api_meta_path,
    api_key = eia_api_key
)

print(meta.meta)
```


```{python}
df1 = api.eia_get(
    api_key = eia_api_key,
    api_path = api_data_path,
    frequency = frequency,
    data = data,
    facets = facets,
    offset = offset,
    length = length
)
```


```{python}
df1.dtypes
```

```{python}
df1.head()
```


```{python}
plot_ly(data = df1, x = ~ period, y = ~ value, type = "scatter", mode = "lines")
```


```{python}
df2 = eia_backfill(
  start = start,
  end = end,
  offset = 2000,
  api_key = eia_api_key,
  facets = facets)

```


```{python}
print(df2.dtypes)

df2.head()
```

```{r}
plot_ly(data = df1, x = ~ period, y = ~ value, type = "scatter", mode = "lines")
```